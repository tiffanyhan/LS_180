#! /usr/bin/env ruby

require 'pg'
require 'date'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
    setup_schema
  end

  def list_expenses
    result = @connection.exec 'SELECT * FROM expenses ORDER BY created_on'
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = 'INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)'
    @connection.exec_params(sql, [amount, memo, date])
  end

  def search_expenses(query)
    sql = 'SELECT * FROM expenses WHERE memo ILIKE $1'
    result = @connection.exec_params(sql, ['%' + query + '%'])
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def delete_expense(id)
    result = get_expense(id)
    abort "There is no expense with the id '#{id}'." unless result

    sql = 'DELETE FROM expenses WHERE id = $1'
    @connection.exec_params(sql, [id])
    puts 'The following expense has been deleted:'
    display_expenses(result)
  end

  def delete_all_expenses
    @connection.exec 'DELETE FROM expenses'
    puts 'All expenses have been deleted.'
  end

  private

  def setup_schema
    result = @connection.exec <<~SQL
      SELECT count(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses'
    SQL

    sql = <<~SQL
      CREATE TABLE expenses (
        id serial PRIMARY KEY,
        amount numeric(6, 2) NOT NULL CHECK (amount >= 0.01),
        memo text NOT NULL,
        created_on date NOT NULL
      )
    SQL

    @connection.exec(sql) if result[0]['count'].to_i.zero?
  end

  def get_expense(id)
    sql = 'SELECT * FROM expenses WHERE id = $1'
    result = @connection.exec_params(sql, [id])
    result.ntuples > 0 ? result : nil
  end

  def display_count(result)
    count = result.ntuples
    puts "There are #{ count.zero? ? 'no' : count } expenses."
  end

  def display_expenses(result)
    result.each do |row|
      columns = [ row['id'].rjust(3),
                  row['created_on'].rjust(10),
                  row['amount'].rjust(12),
                  row['memo']
                ]
      puts columns.join(' | ')
    end

    total = result.field_values('amount').map(&:to_f).inject(:+)

    puts "#{'-' * 50}"
    puts "Total #{total.to_s.rjust(25)}"
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    case arguments.first
    when 'list'
       @application.list_expenses
    when 'add'
      amount, memo = [ arguments[1], arguments[2] ]
      abort 'You must provide an amount and memo' unless amount && memo
      @application.add_expense(amount, memo)
    when 'search'
      query = arguments[1]
      abort 'You must provide a search term' unless query
      @application.search_expenses(query)
    when 'delete'
      id = arguments[1]
      abort 'You must provide an expense id' unless id
      @application.delete_expense(id)
    when 'clear'
      puts 'This will remove all expenses. Are you sure? (y/n)'
      answer = STDIN.getch.downcase
      @application.delete_all_expenses if answer == 'y'
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field}
    HELP
  end
end

CLI.new.run(ARGV)
